plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories { 
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com" }
	maven { url 'https://maven.blamejared.com' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("com.terraformersmc:modmenu:${project.modmenu_version}")

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modCompileOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

	include modApi("teamreborn:energy:${project.techreborn_energy_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation "vazkii.patchouli:Patchouli:${project.patchouli_version}"
}

sourceSets {
		main {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

loom {
	accessWidenerPath = file("src/main/resources/beyond_earth.accesswidener")
	runs {
		datagenClient {
			client()

			runDir = "build/datagen"

			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")

			ideConfigGenerated project.rootProject == project
			name = "Datagen Client"
			source sourceSets.main
		}
		datagenServer {
			server()

			runDir = "build/datagen"

			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")

			ideConfigGenerated project.rootProject == project
			name = "Datagen Server"
			source sourceSets.main
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
	}
}
